{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "\"use client\"\n\nimport React, { createContext, useContext, useMemo } from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"cva\"\nimport { Loader2 } from \"lucide-react\"\n\nimport { autoRef, cn } from \"@/lib/utils\"\n\n/* -------------------------------------------------------------------------- */\n/*                                   Context                                  */\n/* -------------------------------------------------------------------------- */\n\ninterface ButtonContextType {\n  isLoading?: boolean\n  iconOnly?: boolean\n  size?: VariantProps<typeof buttonVariants>[\"size\"]\n}\n\nconst ButtonContext = createContext<ButtonContextType | null>(null)\n\nfunction useButtonContext() {\n  const context = useContext(ButtonContext)\n  if (!context) {\n    throw new Error(\"useButtonContext must be used within a <Button/>\")\n  }\n  return context\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Button                                   */\n/* -------------------------------------------------------------------------- */\n\nexport const buttonVariants = cva({\n  base: cn(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors\",\n    \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n    \"disabled:pointer-events-none disabled:opacity-50\"\n  ),\n  variants: {\n    variant: {\n      default: \"\",\n      secondary: \"\",\n      outline: \"border bg-background\",\n      ghost: \"\",\n    },\n    intent: {\n      default: \"\",\n      destructive: \"\",\n    },\n    size: {\n      xs: \"h-8 px-2 text-xs\",\n      sm: \"h-9 px-3\",\n      default: \"h-10 px-3\",\n      lg: \"h-11 px-5\",\n    },\n    icon: {\n      true: \"\",\n      false: \"\",\n    },\n    width: {\n      default: \"inline-flex\",\n      full: \"flex w-full\",\n    },\n  },\n  compoundVariants: [\n    // default variant\n    {\n      variant: \"default\",\n      intent: \"default\",\n      className: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n    },\n    {\n      variant: \"default\",\n      intent: \"destructive\",\n      className:\n        \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n    },\n    // secondary variant\n    {\n      variant: \"secondary\",\n      intent: \"default\",\n      className: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n    },\n    // outline variant\n    {\n      variant: \"outline\",\n      intent: \"default\",\n      className: \"border-input hover:bg-accent\",\n    },\n    {\n      variant: \"outline\",\n      intent: \"destructive\",\n      className: \"border-destructive text-destructive hover:bg-destructive/5\",\n    },\n    // ghost variant\n    {\n      variant: \"ghost\",\n      intent: \"default\",\n      className: \"hover:bg-accent\",\n    },\n    {\n      variant: \"ghost\",\n      intent: \"destructive\",\n      className: \"text-destructive hover:bg-destructive/10\",\n    },\n    // icon only\n    {\n      size: \"sm\",\n      icon: true,\n      className: \"h-9 w-9 p-2\",\n    },\n    {\n      size: \"default\",\n      icon: true,\n      className: \"h-10 w-10 px-0\",\n    },\n    {\n      size: \"lg\",\n      icon: true,\n      className: \"h-11 w-11 px-0\",\n    },\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    intent: \"default\",\n    size: \"default\",\n    width: \"default\",\n    icon: false,\n  },\n})\n\nexport interface ButtonProps\n  extends React.ComponentPropsWithRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n}\n\nexport const Button = autoRef(\n  ({\n    children,\n    className,\n    width,\n    variant,\n    size,\n    asChild = false,\n    icon,\n    intent,\n    isLoading,\n    disabled,\n    type,\n    ref,\n    ...props\n  }: ButtonProps) => {\n    const Comp = asChild ? Slot : \"button\"\n\n    const buttonContextValues = useMemo(\n      () => ({\n        isLoading,\n        iconOnly: icon,\n        size,\n      }),\n      [isLoading, icon, size]\n    )\n\n    const hasIcon = React.Children.toArray(children).some(\n      (child) => React.isValidElement(child) && child.type === ButtonIcon\n    )\n\n    return (\n      <ButtonContext.Provider value={buttonContextValues}>\n        <Comp\n          className={cn(\n            buttonVariants({ variant, size, width, icon, intent }),\n            className\n          )}\n          disabled={isLoading || disabled}\n          type={props.form !== undefined ? \"submit\" : type ?? \"button\"}\n          ref={ref}\n          {...props}\n        >\n          {asChild ? (\n            children\n          ) : (\n            <>\n              {!hasIcon && <ButtonLoader />}\n              {children}\n            </>\n          )}\n        </Comp>\n      </ButtonContext.Provider>\n    )\n  }\n)\n\n/* -------------------------------------------------------------------------- */\n/*                                 ButtonIcon                                 */\n/* -------------------------------------------------------------------------- */\n\nexport const ButtonIcon = ({\n  icon,\n  className,\n  only,\n}: {\n  icon?: React.ReactNode\n  className?: string\n  only?: boolean\n}) => {\n  const { isLoading, iconOnly } = useButtonContext()\n  const isIconOnly = iconOnly || only\n\n  if (isLoading) {\n    return (\n      <Loader2\n        className={cn(\"h-4 w-4 animate-spin\", !isIconOnly && \"mr-2\", className)}\n      />\n    )\n  }\n\n  return (\n    <Slot className={cn(\"h-4 w-4\", !isIconOnly && \"mr-2\", className)}>\n      {icon}\n    </Slot>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                ButtonLoader                                */\n/* -------------------------------------------------------------------------- */\n\nexport const ButtonLoader = ({ show }: { show?: boolean }) => {\n  const { isLoading } = useButtonContext()\n\n  if (isLoading ?? show) {\n    return <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n  }\n\n  return null\n}\n"
    }
  ],
  "type": "components:ui"
}