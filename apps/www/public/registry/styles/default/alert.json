{
  "name": "alert",
  "files": [
    {
      "name": "alert.tsx",
      "content": "import React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"cva\"\nimport {\n  AlertCircleIcon,\n  AlertTriangleIcon,\n  CheckCircle2Icon,\n  InfoIcon,\n} from \"lucide-react\"\n\nimport { autoRef, cn } from \"@/lib/utils\"\n\n/* -------------------------------------------------------------------------- */\n/*                                    Alert                                   */\n/* -------------------------------------------------------------------------- */\n\nexport const alertVariants = cva({\n  base: cn(\n    \"relative w-full rounded-lg border p-4\",\n    \"[&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7\"\n  ),\n  variants: {\n    type: {\n      default: \"bg-background text-foreground\",\n      error: \"border-destructive bg-destructive/10 text-destructive\",\n      info: \"border-sky-200 bg-sky-500/10 text-sky-900\",\n      warning: \"border-orange-400 bg-orange-500/10 text-orange-800\",\n      success: \"border-green-600 bg-green-500/10 text-green-900\",\n    },\n  },\n  defaultVariants: {\n    type: \"info\",\n  },\n})\n\nexport type AlertProps = React.ComponentPropsWithRef<\"div\"> &\n  VariantProps<typeof alertVariants> & {\n    defaultIcon?: VariantProps<typeof alertVariants>[\"type\"]\n    icon?: React.ReactNode\n  }\n\nexport const Alert = autoRef(\n  ({\n    ref,\n    className,\n    children,\n    type = \"default\",\n    defaultIcon,\n    icon,\n    ...props\n  }: AlertProps) => {\n    let chosenIcon = defaultIcon ?? type\n    let Icon\n    switch (chosenIcon) {\n      case \"default\": {\n        Icon = null\n        break\n      }\n      case \"error\": {\n        Icon = <AlertCircleIcon className=\"h-4 w-4\" />\n        break\n      }\n      case \"info\": {\n        Icon = <InfoIcon className=\"h-4 w-4\" />\n        break\n      }\n      case \"warning\": {\n        Icon = <AlertTriangleIcon className=\"h-4 w-4\" />\n        break\n      }\n      case \"success\": {\n        Icon = <CheckCircle2Icon className=\"h-4 w-4\" />\n        break\n      }\n    }\n\n    if (icon !== undefined) {\n      Icon = <Slot className=\"h-4 w-4\">{icon}</Slot>\n    }\n\n    return (\n      <div\n        ref={ref}\n        role=\"alert\"\n        className={cn(alertVariants({ type }), className)}\n        {...props}\n      >\n        {Icon}\n        {children}\n      </div>\n    )\n  }\n)\n\n/* -------------------------------------------------------------------------- */\n/*                                 AlertTitle                                 */\n/* -------------------------------------------------------------------------- */\n\nexport type AlertTitleProps = React.ComponentPropsWithRef<\"h5\">\n\nexport const AlertTitle = autoRef(\n  ({ className, ...props }: AlertTitleProps) => {\n    return (\n      <h5\n        className={cn(\n          \"mb-1 font-medium leading-none tracking-tight\",\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\n\n/* -------------------------------------------------------------------------- */\n/*                              AlertDescription                              */\n/* -------------------------------------------------------------------------- */\n\nexport type AlertDescriptionProps = React.ComponentPropsWithRef<\"div\">\n\nexport const AlertDescription = autoRef(\n  ({ className, ...props }: AlertDescriptionProps) => {\n    return (\n      <div\n        className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n        {...props}\n      />\n    )\n  }\n)\n"
    }
  ],
  "type": "components:ui"
}